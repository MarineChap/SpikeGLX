{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SpikeGLX Download Page Synchronized acquisition from Imec neural probes and NI-DAQ devices. Get compiled apps, support and help stuff on this page. See what's new on the site here . The source code repo is here . The current commercial version is PXI-based Neuropixels 1.0 , also called 3B2 . What Is SpikeGLX? SpikeGLX is a recording system for extracellular neural probes. The emphasis is on concurrent synchronous recording from high channel count probes together with numerous auxiliary analog and digital channels: Concurrent, synchronized acquisition from Imec and NI-DAQ devices. Imec Neuropixels phase3A, phase3B, phase20, phase30 probe support. HHMI/Whisper System support. Flexible visualization, filtering and sorting tools. Programmable triggering. Remote control via MATLAB. Powerful offline viewing and editing. System Requirements (What to Buy) Requirements differ according to platform: For PXI-based setups . For all earlier setups . Latest Application Downloads 3B2 (NP 1.0) : Release 20200520-phase3B2 ... Readme : Supports UHD-1, NHP, Imec v1.20 Others : Release 20190724-phase3B1 ... Readme : Minor bug fixes, Imec v5.1 Release 20190724-phase3A ... Readme : Minor bug fixes, Imec v4.3 Suggested organization: Create folder 'SpikeGLX' on your desktop or C:\\ then download/unzip associated stuff into it: SpikeGLX\\ Release_v20200309-phase3B2.zip Release_v20200520-phase3B2.zip Release_v20200309-phase3B2\\ Release_v20200520-phase3B2\\ Drivers\\ Enclustra_Windows_10\\ Tools\\ Etc\\ PXI Enclustra Drivers These required driver files are not included in your SpikeGLX release. Click the link below for your Windows OS version. Unzip the folder into your local folder of SpikeGLX-related stuff. Follow the installation ReadMe in the download. Terminology: 'Enclustra' is a company that markets other vendor's FPGAs along with development and support tools. There are several FPGAs used in the Neuropixels hardware, including a Xilinx Zynq model, often referred to as 'the enclustra'. Windows 7 & 8 Windows 10 Command-line Tool Installation CatGT TPrime C_Waves These come as zip files. To install one: Extract the contained folder to any destination you like. Keep the folder contents together, as you do with the SpikeGLX folder. Read the contained ReadMe.txt for instructions. Look at the runit.bat example batch script. CatGT CatGT is a command-line tool that does the following offline operations (all imec phases): Optionally join trials with given run_name and g-index in t-index range [ta,tb]... ...Or run on any individual file. Optionally apply bandpass and global demux CAR filters. Optionally edit out saturation artifacts. Optionally extract tables of sync waveform edge times to drive TPrime. Optionally extract tables of any other TTL event times to be aligned with spikes. CatGT: Global Demuxed CAR CatGT 1.2.9 TPrime TPrime is a command-line tool that maps event times (all imec phases): Map time from one SpikeGLX data stream to any other. Translate all events to a single common timeline. Uses sync edges to achieve 1 to 2 sample accuracy. Maps TTL events extracted using CatGT. Maps spike times from any sorter. Sync: Aligning with Edges. TPrime 1.2 Post-processing Tools MATLAB and Python tools for parsing meta and binary datafiles (supports 3A, 3B1, 3B2, 20). SpikeGLX_Datafile_Tools MATLAB tool that converts metadata to JRClust or Kilosort probe geometry data (supports 3A, 3B1, 3B2, 20). SGLXMetaToCoords Average cluster waveforms and statistics command-line tool. This can be run separately like CatGT or used with ecephys_spike_sorting . C_Waves 1.2 Jennifer Colonell's version of the Allen Institute ecephys_spike_sorting pipeline. This Python script-driven pipeline chains together: CatGT, KS2, Noise Cluster Tagging, C_Waves, QC metrics, TPrime. ecephys_spike_sorting Interesting Map Files Checkerboard Bank Selection 3B (interleaves banks zero and one) Long Column Bank Selection 3B (one column through banks zero and one) Metadata Guides Descriptions of metafile items for each phase: Metadata_20 Metadata_3B2 (NP 1.0) Metadata_3B1 Metadata_3A Help Neuropixels Support Page Noise: Learn How To Solder Sharpening Apparatus (MS.Word.docx) Installing NI Drivers SpikeGLX UserManual SpikeGLX FAQ CatGT: Global Demuxed CAR Sync: Aligning with Edges Parsing Data Files How-to Videos Handle & Solder Sharpen Probe Install Software First Run Sync Licensing Use is subject to Janelia Research Campus Software Copyright 1.2 license terms: http://license.janelia.org/license . QLed components are subject to GNU Library GPL v2.0 terms, which are described here: https://github.com/billkarsh/SpikeGLX/blob/master/QLed-LGPLv2-LICENSE.txt . fin","title":"Home"},{"location":"#spikeglx-download-page","text":"Synchronized acquisition from Imec neural probes and NI-DAQ devices. Get compiled apps, support and help stuff on this page. See what's new on the site here . The source code repo is here . The current commercial version is PXI-based Neuropixels 1.0 , also called 3B2 .","title":"SpikeGLX Download Page"},{"location":"#what-is-spikeglx","text":"SpikeGLX is a recording system for extracellular neural probes. The emphasis is on concurrent synchronous recording from high channel count probes together with numerous auxiliary analog and digital channels: Concurrent, synchronized acquisition from Imec and NI-DAQ devices. Imec Neuropixels phase3A, phase3B, phase20, phase30 probe support. HHMI/Whisper System support. Flexible visualization, filtering and sorting tools. Programmable triggering. Remote control via MATLAB. Powerful offline viewing and editing.","title":"What Is SpikeGLX?"},{"location":"#system-requirements","text":"(What to Buy) Requirements differ according to platform: For PXI-based setups . For all earlier setups .","title":"System Requirements"},{"location":"#latest-application-downloads","text":"3B2 (NP 1.0) : Release 20200520-phase3B2 ... Readme : Supports UHD-1, NHP, Imec v1.20 Others : Release 20190724-phase3B1 ... Readme : Minor bug fixes, Imec v5.1 Release 20190724-phase3A ... Readme : Minor bug fixes, Imec v4.3 Suggested organization: Create folder 'SpikeGLX' on your desktop or C:\\ then download/unzip associated stuff into it: SpikeGLX\\ Release_v20200309-phase3B2.zip Release_v20200520-phase3B2.zip Release_v20200309-phase3B2\\ Release_v20200520-phase3B2\\ Drivers\\ Enclustra_Windows_10\\ Tools\\ Etc\\","title":"Latest Application Downloads"},{"location":"#pxi-enclustra-drivers","text":"These required driver files are not included in your SpikeGLX release. Click the link below for your Windows OS version. Unzip the folder into your local folder of SpikeGLX-related stuff. Follow the installation ReadMe in the download. Terminology: 'Enclustra' is a company that markets other vendor's FPGAs along with development and support tools. There are several FPGAs used in the Neuropixels hardware, including a Xilinx Zynq model, often referred to as 'the enclustra'. Windows 7 & 8 Windows 10","title":"PXI Enclustra Drivers"},{"location":"#command-line-tool-installation","text":"CatGT TPrime C_Waves These come as zip files. To install one: Extract the contained folder to any destination you like. Keep the folder contents together, as you do with the SpikeGLX folder. Read the contained ReadMe.txt for instructions. Look at the runit.bat example batch script.","title":"Command-line Tool Installation"},{"location":"#catgt","text":"CatGT is a command-line tool that does the following offline operations (all imec phases): Optionally join trials with given run_name and g-index in t-index range [ta,tb]... ...Or run on any individual file. Optionally apply bandpass and global demux CAR filters. Optionally edit out saturation artifacts. Optionally extract tables of sync waveform edge times to drive TPrime. Optionally extract tables of any other TTL event times to be aligned with spikes. CatGT: Global Demuxed CAR CatGT 1.2.9","title":"CatGT"},{"location":"#tprime","text":"TPrime is a command-line tool that maps event times (all imec phases): Map time from one SpikeGLX data stream to any other. Translate all events to a single common timeline. Uses sync edges to achieve 1 to 2 sample accuracy. Maps TTL events extracted using CatGT. Maps spike times from any sorter. Sync: Aligning with Edges. TPrime 1.2","title":"TPrime"},{"location":"#post-processing-tools","text":"MATLAB and Python tools for parsing meta and binary datafiles (supports 3A, 3B1, 3B2, 20). SpikeGLX_Datafile_Tools MATLAB tool that converts metadata to JRClust or Kilosort probe geometry data (supports 3A, 3B1, 3B2, 20). SGLXMetaToCoords Average cluster waveforms and statistics command-line tool. This can be run separately like CatGT or used with ecephys_spike_sorting . C_Waves 1.2 Jennifer Colonell's version of the Allen Institute ecephys_spike_sorting pipeline. This Python script-driven pipeline chains together: CatGT, KS2, Noise Cluster Tagging, C_Waves, QC metrics, TPrime. ecephys_spike_sorting","title":"Post-processing Tools"},{"location":"#interesting-map-files","text":"Checkerboard Bank Selection 3B (interleaves banks zero and one) Long Column Bank Selection 3B (one column through banks zero and one)","title":"Interesting Map Files"},{"location":"#metadata-guides","text":"Descriptions of metafile items for each phase: Metadata_20 Metadata_3B2 (NP 1.0) Metadata_3B1 Metadata_3A","title":"Metadata Guides"},{"location":"#help","text":"Neuropixels Support Page Noise: Learn How To Solder Sharpening Apparatus (MS.Word.docx) Installing NI Drivers SpikeGLX UserManual SpikeGLX FAQ CatGT: Global Demuxed CAR Sync: Aligning with Edges Parsing Data Files","title":"Help"},{"location":"#how-to-videos","text":"Handle & Solder Sharpen Probe Install Software First Run Sync","title":"How-to Videos"},{"location":"#licensing","text":"Use is subject to Janelia Research Campus Software Copyright 1.2 license terms: http://license.janelia.org/license . QLed components are subject to GNU Library GPL v2.0 terms, which are described here: https://github.com/billkarsh/SpikeGLX/blob/master/QLed-LGPLv2-LICENSE.txt . fin","title":"Licensing"},{"location":"beta/","text":"Test Versions Get test versions on this page. The current commercial version is PXI-based Neuropixels 1.0 , also called 3B2 . Neuropixels 2.0 (Phase20) Latest : Release 20200520-phase20 ... Readme : New 2.0 probe names, Imec v2.14 Previous : Release 20200309-phase20 ... Readme : Multidrive output, Imec v2.11 PXI Module Firmware A module can only run one flavor of SpikeGLX at a time because it can only contain firmware of one flavor at a time. To run SpikeGLX-phase3B2 the hardware module must contain Neuropixels 1.0 (phase3B2) firmware. To run SpikeGLX-phase20 the module must contain Neuropixels 2.0 firmware. You can always change the firmware, either to get the latest bug fixes, or to switch SpikeGLX flavors. To do that, get the firmware package you want to install from this web page and unzip it to your hard drive. Note that each package contains two files, one for the FPGA on the basestation (BS) and one for the FPGA on the basestation connect card (BSC). The filenames contain either 'BS' or 'BSC' so you can tell them apart. Next run the flavor of SpikeGLX matching the firmware now contained in the module. In SpikeGLX select menu item Tools/Update Imec Firmware . This dialog lets you detect the version currently installed, and lets you select new files to load/install. Click the ? button in the dialog title bar to get further help. Neuropixels 2.0 (Phase20) Firmware Neuropixels 1.0 (Phase3B2) Firmware fin","title":"Beta"},{"location":"beta/#test-versions","text":"Get test versions on this page. The current commercial version is PXI-based Neuropixels 1.0 , also called 3B2 .","title":"Test Versions"},{"location":"beta/#neuropixels-20-phase20","text":"Latest : Release 20200520-phase20 ... Readme : New 2.0 probe names, Imec v2.14 Previous : Release 20200309-phase20 ... Readme : Multidrive output, Imec v2.11","title":"Neuropixels 2.0 (Phase20)"},{"location":"beta/#pxi-module-firmware","text":"A module can only run one flavor of SpikeGLX at a time because it can only contain firmware of one flavor at a time. To run SpikeGLX-phase3B2 the hardware module must contain Neuropixels 1.0 (phase3B2) firmware. To run SpikeGLX-phase20 the module must contain Neuropixels 2.0 firmware. You can always change the firmware, either to get the latest bug fixes, or to switch SpikeGLX flavors. To do that, get the firmware package you want to install from this web page and unzip it to your hard drive. Note that each package contains two files, one for the FPGA on the basestation (BS) and one for the FPGA on the basestation connect card (BSC). The filenames contain either 'BS' or 'BSC' so you can tell them apart. Next run the flavor of SpikeGLX matching the firmware now contained in the module. In SpikeGLX select menu item Tools/Update Imec Firmware . This dialog lets you detect the version currently installed, and lets you select new files to load/install. Click the ? button in the dialog title bar to get further help. Neuropixels 2.0 (Phase20) Firmware Neuropixels 1.0 (Phase3B2) Firmware fin","title":"PXI Module Firmware"},{"location":"legacy/","text":"History / Older versions Imec Project Phases The current commercial version is PXI-based Neuropixels 1.0 , also called 3B2 . There are five branches in this repo separately supporting the five Imec Neuropixels project development phases. The five phases have mutually incompatible hardware and software, so obtain the appropriate materials for your needs. Release software packages are labeled as phase3A, phase3B1, phase3B2, phase20, or phase30. All early releases having no phase label are actually phase3A. All releases support NI-DAQ based acquisition. Phase3A : Initially, 4 flavors of prototype probe (option 1, 2, 3, 4) were created enabling consortium members to choose the most useful architecture and feature set. Phase3A probes are connected one at a time to a Xilinx Kintex 7 FPGA board, and accessed via Ethernet. The probes, cables, HS and BSC parts are specific to phase3A. Phase3B1 : At this phase, option 3 probes had won and were further developed for commercial production. The same Xilinx board is retained for one at a time probe operation over Ethernet (but reprogrammed for 3B1). The cables, HS and BSC parts are all specific to 3B1. The 3B probes can be run with either 3B1 or 3B2 setups. Phase3B2 : A.k.a. Neuropixels 1.0. This phase replaces the Xilinx board with PXIe based modules, each of which connects up to 4 probes. Several modules can be operated together from one PXI chassis and one application. The probes are the same as the phase3B1, but all other hardware parts are specific to the PXIe implementation. Phase20 : A.k.a. Neuropixels 2.0, introduces specific probes and HS with a more compact design. The HS each support two probes. The same PXIe modules can be used with a firmware update. Initially, SpikeGLX for this phase is specific to 2.0 hardware. Phase30 : This is unified software to support Neuropixels 1.0, 2.0 and all other probe hardware going forward. Older Versions 3B2 (NP 1.0) : Release 20200309-phase3B2 ... Readme : Multidrive output, Imec v1.20 Release 20190724-phase3B2 ... Readme : Minor bug fixes, Imec v1.20 Release 20190413-phase3B2 ... Readme : Flexible bank selection, Imec v1.20 Release 20190327-phase3B2 ... Readme : Fix names with dots, Imec v1.15 3B1 : Release 20190413-phase3B1 ... Readme : Flexible bank selection, Imec v5.1 Release 20190327-phase3B1 ... Readme : Fix names with dots, Imec v5.1 Release 20190305-phase3B1 ... Readme : 32 NI channels, Imec v5.1 Release 20190214-phase3B1 ... Readme : Run folders, Imec v5.1 Release 20180829-phase3B1 ... Readme : Fix TTL trigger, Imec v5.1 Release 20180515-phase3B1 ... Readme : Fix FileViewer, Imec v5.1 Release 20180325-phase3B1 ... Readme : Fixed-up 3B1, Imec v5.1 3A : Release 20190413-phase3A ... Readme : Flexible bank selection, Imec v4.3 Release 20190327-phase3A ... Readme : Fix names with dots, Imec v4.3 Release 20190305-phase3A ... Readme : 32 NI channels, Imec v4.3 Release 20190214-phase3A ... Readme : Run folders, Imec v4.3 Release 20180829-phase3A ... Readme : Fix TTL trigger, Imec v4.3 Release 20180525-phase3A ... Readme : Add MATLAB features, minor fixes, Imec v4.3 Release 20180515-phase3A ... Readme : Handle broken EEPROMs, fix FileViewer, Imec v4.3 fin","title":"Legacy"},{"location":"legacy/#history-older-versions","text":"","title":"History / Older versions"},{"location":"legacy/#imec-project-phases","text":"The current commercial version is PXI-based Neuropixels 1.0 , also called 3B2 . There are five branches in this repo separately supporting the five Imec Neuropixels project development phases. The five phases have mutually incompatible hardware and software, so obtain the appropriate materials for your needs. Release software packages are labeled as phase3A, phase3B1, phase3B2, phase20, or phase30. All early releases having no phase label are actually phase3A. All releases support NI-DAQ based acquisition. Phase3A : Initially, 4 flavors of prototype probe (option 1, 2, 3, 4) were created enabling consortium members to choose the most useful architecture and feature set. Phase3A probes are connected one at a time to a Xilinx Kintex 7 FPGA board, and accessed via Ethernet. The probes, cables, HS and BSC parts are specific to phase3A. Phase3B1 : At this phase, option 3 probes had won and were further developed for commercial production. The same Xilinx board is retained for one at a time probe operation over Ethernet (but reprogrammed for 3B1). The cables, HS and BSC parts are all specific to 3B1. The 3B probes can be run with either 3B1 or 3B2 setups. Phase3B2 : A.k.a. Neuropixels 1.0. This phase replaces the Xilinx board with PXIe based modules, each of which connects up to 4 probes. Several modules can be operated together from one PXI chassis and one application. The probes are the same as the phase3B1, but all other hardware parts are specific to the PXIe implementation. Phase20 : A.k.a. Neuropixels 2.0, introduces specific probes and HS with a more compact design. The HS each support two probes. The same PXIe modules can be used with a firmware update. Initially, SpikeGLX for this phase is specific to 2.0 hardware. Phase30 : This is unified software to support Neuropixels 1.0, 2.0 and all other probe hardware going forward.","title":"Imec Project Phases"},{"location":"legacy/#older-versions","text":"3B2 (NP 1.0) : Release 20200309-phase3B2 ... Readme : Multidrive output, Imec v1.20 Release 20190724-phase3B2 ... Readme : Minor bug fixes, Imec v1.20 Release 20190413-phase3B2 ... Readme : Flexible bank selection, Imec v1.20 Release 20190327-phase3B2 ... Readme : Fix names with dots, Imec v1.15 3B1 : Release 20190413-phase3B1 ... Readme : Flexible bank selection, Imec v5.1 Release 20190327-phase3B1 ... Readme : Fix names with dots, Imec v5.1 Release 20190305-phase3B1 ... Readme : 32 NI channels, Imec v5.1 Release 20190214-phase3B1 ... Readme : Run folders, Imec v5.1 Release 20180829-phase3B1 ... Readme : Fix TTL trigger, Imec v5.1 Release 20180515-phase3B1 ... Readme : Fix FileViewer, Imec v5.1 Release 20180325-phase3B1 ... Readme : Fixed-up 3B1, Imec v5.1 3A : Release 20190413-phase3A ... Readme : Flexible bank selection, Imec v4.3 Release 20190327-phase3A ... Readme : Fix names with dots, Imec v4.3 Release 20190305-phase3A ... Readme : 32 NI channels, Imec v4.3 Release 20190214-phase3A ... Readme : Run folders, Imec v4.3 Release 20180829-phase3A ... Readme : Fix TTL trigger, Imec v4.3 Release 20180525-phase3A ... Readme : Add MATLAB features, minor fixes, Imec v4.3 Release 20180515-phase3A ... Readme : Handle broken EEPROMs, fix FileViewer, Imec v4.3 fin","title":"Older Versions"},{"location":"new/","text":"What's New On The Site? July 14, 2020: SpikeGLX 20200520-phase3B2 (Supports UHD-1, NHP, Imec v1.20). SpikeGLX 20200520-phase20 (New 2.0 probe names, Imec v2.14). CatGT 1.2.9 (Supports UHD-1, NHP). C_Waves 1.2 (Supports UHD-1, NHP). Rename module firmware files. June 1, 2020: Add module firmware to Beta page. May 12, 2020: SpikeGLX 20200309 (PXI versions get multidrive run splitting). CatGT 1.2.8 (Option -prb_miss_ok addded for multidrive output). New document: Help/\"Parsing Data Files.\" April 3, 2020: CatGT 1.2.7 (Extractors get optional pulse duration tolerance). New document: Help/\"Noise: Learn How To Solder.\" March 26, 2020: C_Waves 1.1 (Removes 4GB binary file size limit). March 10, 2020: New SpikeGLX version (all phases). C_Waves 1.0 post-processing pipeline component added. March 06, 2020: CatGT 1.2.6. TPrime 1.2. New versions: Post-processing Tools. Add site menu: \"Help.\" Add site menu: \"New.\" New document: Help/\"Sync: Aligning with Edges.\" fin","title":"New"},{"location":"new/#whats-new-on-the-site","text":"July 14, 2020: SpikeGLX 20200520-phase3B2 (Supports UHD-1, NHP, Imec v1.20). SpikeGLX 20200520-phase20 (New 2.0 probe names, Imec v2.14). CatGT 1.2.9 (Supports UHD-1, NHP). C_Waves 1.2 (Supports UHD-1, NHP). Rename module firmware files. June 1, 2020: Add module firmware to Beta page. May 12, 2020: SpikeGLX 20200309 (PXI versions get multidrive run splitting). CatGT 1.2.8 (Option -prb_miss_ok addded for multidrive output). New document: Help/\"Parsing Data Files.\" April 3, 2020: CatGT 1.2.7 (Extractors get optional pulse duration tolerance). New document: Help/\"Noise: Learn How To Solder.\" March 26, 2020: C_Waves 1.1 (Removes 4GB binary file size limit). March 10, 2020: New SpikeGLX version (all phases). C_Waves 1.0 post-processing pipeline component added. March 06, 2020: CatGT 1.2.6. TPrime 1.2. New versions: Post-processing Tools. Add site menu: \"Help.\" Add site menu: \"New.\" New document: Help/\"Sync: Aligning with Edges.\" fin","title":"What's New On The Site?"},{"location":"Help/parsing/","text":"Parsing Data Files Directory and file names Imec probe filenames 3A probe filename has no index number after .imec. , e.g. myrun_g0_t0.imec.ap.meta . All later phases have a probe index, e.g. myrun_g0_t0.imec0.ap.meta . CatGT Tip : Use option -prb_3A for 3A data, and DON'T use -prb=list ! Run folder Prior to SpikeGLX version 20190214 there were no run folders. Rather, all datafiles output from a run were placed directly into the current Data Directory . Version 20190214 and later first create a Run Folder within the data directory. The run folder holds all output from that run, and is named with a g-index, e.g. myrun_g0 . CatGT Tip : Use option -no_run_fld for runs before version 20190214. Probe folders Xilinx-based 3A, 3B1 These phases are single-probe. No option for probe folders is provided. PXI-based 3B2, 2.0 Version 20190214 and later provide a Folder per probe option on the Save tab: If not selected, no probe folders are created. Rather, all output files for a run are saved into its Run Folder . If selected (checked): All nidq datafiles are saved directly into the Run Folder . A separate Probe Folder for each imec probe is first created in the run folder. The probe folder holds all output from that probe, and is named with both g- and probe-indices, e.g. myrun_g0_imec6 . CatGT Tip : Use option -prb_fld if option selected. Multidrive output PXI-based 3B2, 2.0 Before the multidrive option was introduced SpikeGLX let you specify at most one data directory to hold all your run output folders and files. As of version 20200309 , there is still a main data directory, but now you can check a box to enable the splitting of runs across additional drives/directories to access greater storage capacity when doing very long runs or when using many probes. Modulo rule The rule for distributing run output into several data directories is this: As always, the (N) probes have logical indices [0..N-1] . The main data directory is dir-0 . The set of all (M) directories, including the main one are enumerated [dir-0..dir-M-1] . NI output is always sent to dir-0. Probe-j output is sent to dir-(j modulo M) . Within each dir-k SpikeGLX will create a run folder and applicable probe folders according to the same rules that apply for a single main data directory. A Modulo B means \"take the remainder of dividing integers A/B \". Modulo is often written mod and is written % in C/C++ and Python code. For example, suppose these parameters: dir-0 = D:\\Data dir-1 = E:\\DataB dir-2 = G:\\DataC runname = myRun folder per run is enabled Example output would go here: NI: D:\\Data\\myrun\\myrun_g0_t0.ni.bin(.meta) Imec0: D:\\Data\\myrun\\myrun_g0_imec0\\myrun_g0_t0.imec0.ap.bin(.meta) Imec3: D:\\Data\\myrun\\myrun_g0_imec3\\myrun_g0_t0.imec3.ap.bin(.meta) Imec4: E:\\DataB\\myrun\\myrun_g0_imec4\\myrun_g0_t0.imec4.ap.bin(.meta) Imec8: G:\\DataC\\myrun\\myrun_g0_imec8\\myrun_g0_t0.imec8.ap.bin(.meta) New offline behaviors When multidrive output is enabled, a run's files are distributed over several directories. The SpikeGLX features and tools that work on sets of run files are affected as follows: FileViewer/Link : To link files in the same run, that is, to show them and scroll them together, you first open any binary file from a run, then choose File/Link in the Viewer window. In the Link dialog you list which other streams in this run to open and link together. This feature only knows how to search for and link other streams that reside in the same parent data-dir/run-folder as the open file. If the multidrive option had split the run, you will only be able to link the streams that live together in one of the split run folders. You'll have to separately view and link data that live in separate data directories. Tools/Sample Rates From Run : This dialog still looks the same. You select any binary file from a run and you have an option to calibrate just that data stream, or all of the streams it can find in the same run folder. If the multidrive option had split the run, this tool will only be able to locate and calibrate probes it can find in the same split run folder as the selected binary. That is, you'll have to repeat this process once for each separate data directory. CatGT : Tell CatGT which probes to process by pointing to a data directory -dir=myDir and listing the probes you want to process, say -prb=0:3 . In CatGT version 1.2.7 and earlier, if any probe is missing from that directory, the run stops and logs a missing file error. As of CatGT version 1.2.8 you can add option -prb_miss_ok telling CatGT to skip missing probes and continue with the next one it finds in that directory. Note that you will have to make a separate command line for each data directory, but each command line can conveniently list all of the probes in the run. You don't have to figure out the modulo rule for each directory. TPrime : Unaffected. All of the input and outfile files {tostream, fromstream, events} already have independently specified paths. Metadata differences by phase This isn't an exhaustive list of differences. Rather, this is what we parse in our own code. Phase 3A vs later: Filename 3A probe filename has no index number after .imec. , e.g. myrun_g0_t0.imec.ap.meta . All later phases have a probe index, e.g. myrun_g0_t0.imec0.ap.meta . Metadata 3A contains key typeEnabled with string values from list {imec, nidq} . All later phases instead contain keys {typeIMEnabled, typeNIEnabled} with integer counts of those streams. Phase 3B1 vs later: Metadata 3B1 does not have keys {imDatPrb_port, imDatPrb_slot, syncImInputSlot} . Phase 2.0: Metadata 2.0 introduces keys {imDatPrb_dock, imMaxInt} Probe type 3A contains key imProbeOpt , an integer prototype probe option code {1,2,3,4} . All later phases instead contain key imDatPrb_type , an integer encoding a production probe's unique feature set. fin","title":"Parsing Data Files"},{"location":"Help/parsing/#parsing-data-files","text":"","title":"Parsing Data Files"},{"location":"Help/parsing/#directory-and-file-names","text":"","title":"Directory and file names"},{"location":"Help/parsing/#imec-probe-filenames","text":"3A probe filename has no index number after .imec. , e.g. myrun_g0_t0.imec.ap.meta . All later phases have a probe index, e.g. myrun_g0_t0.imec0.ap.meta . CatGT Tip : Use option -prb_3A for 3A data, and DON'T use -prb=list !","title":"Imec probe filenames"},{"location":"Help/parsing/#run-folder","text":"Prior to SpikeGLX version 20190214 there were no run folders. Rather, all datafiles output from a run were placed directly into the current Data Directory . Version 20190214 and later first create a Run Folder within the data directory. The run folder holds all output from that run, and is named with a g-index, e.g. myrun_g0 . CatGT Tip : Use option -no_run_fld for runs before version 20190214.","title":"Run folder"},{"location":"Help/parsing/#probe-folders","text":"Xilinx-based 3A, 3B1 These phases are single-probe. No option for probe folders is provided. PXI-based 3B2, 2.0 Version 20190214 and later provide a Folder per probe option on the Save tab: If not selected, no probe folders are created. Rather, all output files for a run are saved into its Run Folder . If selected (checked): All nidq datafiles are saved directly into the Run Folder . A separate Probe Folder for each imec probe is first created in the run folder. The probe folder holds all output from that probe, and is named with both g- and probe-indices, e.g. myrun_g0_imec6 . CatGT Tip : Use option -prb_fld if option selected.","title":"Probe folders"},{"location":"Help/parsing/#multidrive-output","text":"","title":"Multidrive output"},{"location":"Help/parsing/#pxi-based-3b2-20","text":"Before the multidrive option was introduced SpikeGLX let you specify at most one data directory to hold all your run output folders and files. As of version 20200309 , there is still a main data directory, but now you can check a box to enable the splitting of runs across additional drives/directories to access greater storage capacity when doing very long runs or when using many probes. Modulo rule The rule for distributing run output into several data directories is this: As always, the (N) probes have logical indices [0..N-1] . The main data directory is dir-0 . The set of all (M) directories, including the main one are enumerated [dir-0..dir-M-1] . NI output is always sent to dir-0. Probe-j output is sent to dir-(j modulo M) . Within each dir-k SpikeGLX will create a run folder and applicable probe folders according to the same rules that apply for a single main data directory. A Modulo B means \"take the remainder of dividing integers A/B \". Modulo is often written mod and is written % in C/C++ and Python code. For example, suppose these parameters: dir-0 = D:\\Data dir-1 = E:\\DataB dir-2 = G:\\DataC runname = myRun folder per run is enabled Example output would go here: NI: D:\\Data\\myrun\\myrun_g0_t0.ni.bin(.meta) Imec0: D:\\Data\\myrun\\myrun_g0_imec0\\myrun_g0_t0.imec0.ap.bin(.meta) Imec3: D:\\Data\\myrun\\myrun_g0_imec3\\myrun_g0_t0.imec3.ap.bin(.meta) Imec4: E:\\DataB\\myrun\\myrun_g0_imec4\\myrun_g0_t0.imec4.ap.bin(.meta) Imec8: G:\\DataC\\myrun\\myrun_g0_imec8\\myrun_g0_t0.imec8.ap.bin(.meta)","title":"PXI-based 3B2, 2.0"},{"location":"Help/parsing/#new-offline-behaviors","text":"When multidrive output is enabled, a run's files are distributed over several directories. The SpikeGLX features and tools that work on sets of run files are affected as follows: FileViewer/Link : To link files in the same run, that is, to show them and scroll them together, you first open any binary file from a run, then choose File/Link in the Viewer window. In the Link dialog you list which other streams in this run to open and link together. This feature only knows how to search for and link other streams that reside in the same parent data-dir/run-folder as the open file. If the multidrive option had split the run, you will only be able to link the streams that live together in one of the split run folders. You'll have to separately view and link data that live in separate data directories. Tools/Sample Rates From Run : This dialog still looks the same. You select any binary file from a run and you have an option to calibrate just that data stream, or all of the streams it can find in the same run folder. If the multidrive option had split the run, this tool will only be able to locate and calibrate probes it can find in the same split run folder as the selected binary. That is, you'll have to repeat this process once for each separate data directory. CatGT : Tell CatGT which probes to process by pointing to a data directory -dir=myDir and listing the probes you want to process, say -prb=0:3 . In CatGT version 1.2.7 and earlier, if any probe is missing from that directory, the run stops and logs a missing file error. As of CatGT version 1.2.8 you can add option -prb_miss_ok telling CatGT to skip missing probes and continue with the next one it finds in that directory. Note that you will have to make a separate command line for each data directory, but each command line can conveniently list all of the probes in the run. You don't have to figure out the modulo rule for each directory. TPrime : Unaffected. All of the input and outfile files {tostream, fromstream, events} already have independently specified paths.","title":"New offline behaviors"},{"location":"Help/parsing/#metadata-differences-by-phase","text":"This isn't an exhaustive list of differences. Rather, this is what we parse in our own code.","title":"Metadata differences by phase"},{"location":"Help/parsing/#phase-3a-vs-later","text":"Filename 3A probe filename has no index number after .imec. , e.g. myrun_g0_t0.imec.ap.meta . All later phases have a probe index, e.g. myrun_g0_t0.imec0.ap.meta . Metadata 3A contains key typeEnabled with string values from list {imec, nidq} . All later phases instead contain keys {typeIMEnabled, typeNIEnabled} with integer counts of those streams.","title":"Phase 3A vs later:"},{"location":"Help/parsing/#phase-3b1-vs-later","text":"Metadata 3B1 does not have keys {imDatPrb_port, imDatPrb_slot, syncImInputSlot} .","title":"Phase 3B1 vs later:"},{"location":"Help/parsing/#phase-20","text":"Metadata 2.0 introduces keys {imDatPrb_dock, imMaxInt}","title":"Phase 2.0:"},{"location":"Help/parsing/#probe-type","text":"3A contains key imProbeOpt , an integer prototype probe option code {1,2,3,4} . All later phases instead contain key imDatPrb_type , an integer encoding a production probe's unique feature set. fin","title":"Probe type"},{"location":"Help/NIDriverInstall/NI_driver_installation/","text":"NI chassis and I/O card setup This document covers the steps to install the necessary software for an NI chassis, NI remote control module, and an NI acquisition device for non-neural signals. We've selected a PXI-6133 module in these example. SpikeGLX will work with multifunction IO S-series 61XX, M-series 62XX, X-series 63XX devices, and with digital-only 653X devices. Moreover, you can use PXI, PCI or USB devices, though USB is slower and should be avoided for new purchases. Install Hardware Start by installing the remote control module (e.g. NI PXIe-8381, NI PXIe-8301) in the control slot (slot 1, red) in the PXI chassis. If you're using a PXIe-PCIe link, install the corresponding PCIe card in your computer. The PXI-6133 module and PXIe imec modules can be installed now or added after all the NI software has been installed. Boot Up Power-on sequence varies for different chassis models and links. NI 1082 with any link: Leave the chassis off; it will be automatically turned on when the computer boots. NI 1071 with PXIe-PCIe link: Power chassis on first, then start computer. NI 1071 with Thunderbolt link: Power on sequence should not matter; we recommend powering the chassis on first. Note that although Thunderbolt is hot-pluggable in many applications, breaking the connection between the computer and chassis is NOT recommended for a Neuropixels system. The system should be power cycled if the link is disconnected accidentally. When Windows boots, the new hardware will be recognized by the system. For the Thunderbolt link, a dialog comes up asking if you want to always link to this device; select \"Always connect\". In the device manager, the chassis shows up in Other devices as an \"SM Bus Controller.\" A Neuropixels module, if the driver software has not been installed, appears as a \"PCIe Memory controller.\" Install Platform Services Depending on the computer, the chassis may or may not be recognized as an NI device. If it is, a dialog will appear with a link to the download page for the NI PXI Platform Services driver package. The download page is here: PXI Platform Services . Select the latest, non-runtime version. When you click the download link, you'll be asked to log in or create an NI account; creating an NI account only requires an email address. Following the NI instructions, extract the downloaded zip and run the installer. Use the default settings for what to install. For version 18.5, that list is: The only option during the installation is whether to allow automatic updating of NI software; we recommend against automatic updating of any kind on a high throughput data acquisition computer. After the installation, run NI-MAX (Measurement & Automation Explorer). The left hand pane shows a tree of all the installed devices detected by the software. The PXI-6133 appears underneath the heading for the chassis (a PCI-6133 installed in the computer shows up as an independent device). Here's the NI-MAX display for a system with the PXI-6133 installed in an NI 1082 PXI chassis. Note that the chassis is recognized at this stage. The PXI-6133 is also recognized, but doesn't have a driver yet. Install DAQmx SpikeGLX communicates with the PXI-6133 or PCI-6133 using an NI package called NI-DAQmx. Use the link in the dialog, or go to NI driver downloads . Follow the link to the NI-DAQmx drivers. Select the latest version, and pick the option for Runtime with Configuration Support . Configuration Support means NI-MAX gets useful tabs showing device pinouts, signal routing tables, and tools for creating your own simple test applications. The figure shows v18.6 but SpikeGLX has been tested with all versions up to v19.6. The latest version should be fine. Follow the NI instructions for downloading and running the installer. The only options will be where to install (default is fine) and whether to allow updates; again, we recommend against automated updating. After the NI-DAQmx installation, run NI-MAX again. Now the PXI-6133 is recognized and is ready to run: Hook up your signals NI sells two varieties of breakout boxes. For the PXI-6133, which has 8 analog and 8 digital inputs, the BNC-2110 is very convenient. To connect more than 8 analog inputs (e.g. 16 single ended inputs on a PXIe-6341), choose an SCB-68, which gives direct access to all the pins of the I/O connector. fin","title":"Installing NI Drivers"},{"location":"Help/NIDriverInstall/NI_driver_installation/#ni-chassis-and-io-card-setup","text":"This document covers the steps to install the necessary software for an NI chassis, NI remote control module, and an NI acquisition device for non-neural signals. We've selected a PXI-6133 module in these example. SpikeGLX will work with multifunction IO S-series 61XX, M-series 62XX, X-series 63XX devices, and with digital-only 653X devices. Moreover, you can use PXI, PCI or USB devices, though USB is slower and should be avoided for new purchases.","title":"NI chassis and I/O card setup"},{"location":"Help/NIDriverInstall/NI_driver_installation/#install-hardware","text":"Start by installing the remote control module (e.g. NI PXIe-8381, NI PXIe-8301) in the control slot (slot 1, red) in the PXI chassis. If you're using a PXIe-PCIe link, install the corresponding PCIe card in your computer. The PXI-6133 module and PXIe imec modules can be installed now or added after all the NI software has been installed.","title":"Install Hardware"},{"location":"Help/NIDriverInstall/NI_driver_installation/#boot-up","text":"Power-on sequence varies for different chassis models and links. NI 1082 with any link: Leave the chassis off; it will be automatically turned on when the computer boots. NI 1071 with PXIe-PCIe link: Power chassis on first, then start computer. NI 1071 with Thunderbolt link: Power on sequence should not matter; we recommend powering the chassis on first. Note that although Thunderbolt is hot-pluggable in many applications, breaking the connection between the computer and chassis is NOT recommended for a Neuropixels system. The system should be power cycled if the link is disconnected accidentally. When Windows boots, the new hardware will be recognized by the system. For the Thunderbolt link, a dialog comes up asking if you want to always link to this device; select \"Always connect\". In the device manager, the chassis shows up in Other devices as an \"SM Bus Controller.\" A Neuropixels module, if the driver software has not been installed, appears as a \"PCIe Memory controller.\"","title":"Boot Up"},{"location":"Help/NIDriverInstall/NI_driver_installation/#install-platform-services","text":"Depending on the computer, the chassis may or may not be recognized as an NI device. If it is, a dialog will appear with a link to the download page for the NI PXI Platform Services driver package. The download page is here: PXI Platform Services . Select the latest, non-runtime version. When you click the download link, you'll be asked to log in or create an NI account; creating an NI account only requires an email address. Following the NI instructions, extract the downloaded zip and run the installer. Use the default settings for what to install. For version 18.5, that list is: The only option during the installation is whether to allow automatic updating of NI software; we recommend against automatic updating of any kind on a high throughput data acquisition computer. After the installation, run NI-MAX (Measurement & Automation Explorer). The left hand pane shows a tree of all the installed devices detected by the software. The PXI-6133 appears underneath the heading for the chassis (a PCI-6133 installed in the computer shows up as an independent device). Here's the NI-MAX display for a system with the PXI-6133 installed in an NI 1082 PXI chassis. Note that the chassis is recognized at this stage. The PXI-6133 is also recognized, but doesn't have a driver yet.","title":"Install Platform Services"},{"location":"Help/NIDriverInstall/NI_driver_installation/#install-daqmx","text":"SpikeGLX communicates with the PXI-6133 or PCI-6133 using an NI package called NI-DAQmx. Use the link in the dialog, or go to NI driver downloads . Follow the link to the NI-DAQmx drivers. Select the latest version, and pick the option for Runtime with Configuration Support . Configuration Support means NI-MAX gets useful tabs showing device pinouts, signal routing tables, and tools for creating your own simple test applications. The figure shows v18.6 but SpikeGLX has been tested with all versions up to v19.6. The latest version should be fine. Follow the NI instructions for downloading and running the installer. The only options will be where to install (default is fine) and whether to allow updates; again, we recommend against automated updating. After the NI-DAQmx installation, run NI-MAX again. Now the PXI-6133 is recognized and is ready to run:","title":"Install DAQmx"},{"location":"Help/NIDriverInstall/NI_driver_installation/#hook-up-your-signals","text":"NI sells two varieties of breakout boxes. For the PXI-6133, which has 8 analog and 8 digital inputs, the BNC-2110 is very convenient. To connect more than 8 analog inputs (e.g. 16 single ended inputs on a PXIe-6341), choose an SCB-68, which gives direct access to all the pins of the I/O connector. fin","title":"Hook up your signals"},{"location":"Help/Solder/solder/","text":"Noise: Learn How To Solder Overview Imec probes as shipped to you generally meet their noise specs: 6 uV RMS . Noise above that is in your own setup/environment. There are many possible sources of noise in the world, but all too often we have traced excessive noise to bad soldering of the reference or ground connections at (or near) the probe. Such effects can show up with a wide range of amplitudes and frequencies, but tend to be common to most channels. The probes are super sensitive differential voltage meters. A bad solder joint on the reference path will have high (possibly variable) resistance. This causes measurements to float and wander. Similarly, a poor connection of the amplifier ground causes unpredictable circuit performance. It is essential to make good wiring connections at the probe and at other points such as a skull screw. What to look for Following image unmodified and courtesy of Bill Earl, adafruit.com. Look at your connections! Do they honestly look alright? How to solder Read all the truly excellent instructions at adafruit.com: Guide To Excellent Soldering . We've added some emphasis and a few extra tips below. Tips Practice first : If you're at all nervous about doing this right, and who isn't?, then by all means practice soldering some wires or inexpensive resistors onto an old printed circuit board. Next extend your soldering practice to flex cable which doesn't heat as easily as standard printed circuit board. Use a dummy probe if you have one to spare. Get the hang of it first. Maybe somebody else in your lab is just better at it than you are. Make them do it. Buy them a beer after. Use the right wire : Use wire with adequate conductivity like copper or silver. Stainless steel, for example, does not conduct heat very well making it hard to wet with solder. Solder won't stick to it. Use the right solder : Lead is nasty, but quite honestly, you want to use solder with about a 60/40 ratio of tin/lead because it melts and flows at a low enough temperature to prevent damaging the probe. Use the right iron : Use an iron with settable temperature so you can get the joint hot enough but overheat it. Set it to about 700 F. Make sure the parts are clean : The pad, wire and tip of the iron should be free of oils, plastics or other contaminants. Tin the tip of the iron : First wet the tip of the iron with solder then wipe off the excess using the moistened sponge that comes with the solder station. A wetted tip helps the iron conduct heat to the joint. Heat the joint, not the solder : Never drip molten solder onto a joint. Heat the joint up so solder flows onto and adheres to the joint. Get it hot enough : Yes the probe is expensive and the iron is hot. You'll be super nervous, but you still have to get the connection hot enough to flow the solder or your expensive probe will not work. Keep still while it cools : After removing the iron, the joint and solder will cool in 2 to 3 seconds. Don't move while it cools. If you disturb the work during those few seconds you'll diminish the contact surface area, hence, the conductivity of the joint. fin","title":"Noise: Learn How To Solder"},{"location":"Help/Solder/solder/#noise-learn-how-to-solder","text":"","title":"Noise: Learn How To Solder"},{"location":"Help/Solder/solder/#overview","text":"Imec probes as shipped to you generally meet their noise specs: 6 uV RMS . Noise above that is in your own setup/environment. There are many possible sources of noise in the world, but all too often we have traced excessive noise to bad soldering of the reference or ground connections at (or near) the probe. Such effects can show up with a wide range of amplitudes and frequencies, but tend to be common to most channels. The probes are super sensitive differential voltage meters. A bad solder joint on the reference path will have high (possibly variable) resistance. This causes measurements to float and wander. Similarly, a poor connection of the amplifier ground causes unpredictable circuit performance. It is essential to make good wiring connections at the probe and at other points such as a skull screw.","title":"Overview"},{"location":"Help/Solder/solder/#what-to-look-for","text":"Following image unmodified and courtesy of Bill Earl, adafruit.com. Look at your connections! Do they honestly look alright?","title":"What to look for"},{"location":"Help/Solder/solder/#how-to-solder","text":"Read all the truly excellent instructions at adafruit.com: Guide To Excellent Soldering . We've added some emphasis and a few extra tips below.","title":"How to solder"},{"location":"Help/Solder/solder/#tips","text":"Practice first : If you're at all nervous about doing this right, and who isn't?, then by all means practice soldering some wires or inexpensive resistors onto an old printed circuit board. Next extend your soldering practice to flex cable which doesn't heat as easily as standard printed circuit board. Use a dummy probe if you have one to spare. Get the hang of it first. Maybe somebody else in your lab is just better at it than you are. Make them do it. Buy them a beer after. Use the right wire : Use wire with adequate conductivity like copper or silver. Stainless steel, for example, does not conduct heat very well making it hard to wet with solder. Solder won't stick to it. Use the right solder : Lead is nasty, but quite honestly, you want to use solder with about a 60/40 ratio of tin/lead because it melts and flows at a low enough temperature to prevent damaging the probe. Use the right iron : Use an iron with settable temperature so you can get the joint hot enough but overheat it. Set it to about 700 F. Make sure the parts are clean : The pad, wire and tip of the iron should be free of oils, plastics or other contaminants. Tin the tip of the iron : First wet the tip of the iron with solder then wipe off the excess using the moistened sponge that comes with the solder station. A wetted tip helps the iron conduct heat to the joint. Heat the joint, not the solder : Never drip molten solder onto a joint. Heat the joint up so solder flows onto and adheres to the joint. Get it hot enough : Yes the probe is expensive and the iron is hot. You'll be super nervous, but you still have to get the connection hot enough to flow the solder or your expensive probe will not work. Keep still while it cools : After removing the iron, the joint and solder will cool in 2 to 3 seconds. Don't move while it cools. If you disturb the work during those few seconds you'll diminish the contact surface area, hence, the conductivity of the joint. fin","title":"Tips"},{"location":"Help/SyncEdges/Sync_edges/","text":"Sync: Aligning with Edges Document organization: General principles Needed components and their use Worked example showing command line parameters Plug for scripted pipeline Overview Definition : SpikeGLX Data Stream = Set of channels sampled according to a given sample clock. Examples of streams: Neuropixels probe . The sample clock lives in the headstage . The AP-band data are acquired at nominally 30kHz but actual rates may differ by as much as one Hz. If that probe acquires a separate LF-band, the same clock is used and the LF-band sample rate is exactly 1/12 that of the AP-band. In short each probe, really each headstage, is a separate stream. NI device : Generally you will record all of your non-neural analog and digital (TTL) channels with a single multifunction/multichannel device running at a sample rate that you select. This is one stream. Actually SpikeGLX lets you run two NI devices of the same model together, one master and one slave, so that they share a common clock, and are thus recorded and treated as a single stream with double the channel capacity. Problem : Generally, data streams each have their own clock, hence, their own nominal sample rate, and run asynchronously. Moreover, sample clock rates will vary with temperature. This makes it necessary and challenging to synchronize (align) events acquired in different streams. Solution : SpikeGLX (plus companion tools CatGT and TPrime ) provide a reliable means of aligning data to sub-millisecond accuracy. Note that the SpikeGLX \"alignment\" process does not entail any resampling or editing of the raw acquired data. Rather it is a scheme for mapping post-analysis event times (seconds, not samples) from one coordinate system to another. This mapping scheme is implemented as follows. A common 1 Hz square wave is recorded in one channel of each data stream throughout the experiment. In offline processing, the rising edges in this \" sync wave \" are paired across streams A & B. Any event (T) occurring in B is no more than one second away from a nearest (preceding) sync wave edge (Eb) in stream B. That edge has a simultaneously occurring matching edge (Ea) in stream A. To map T in stream B to T' in stream A, we simply calculate: T' = T - Eb + Ea. Assuming we can correctly pair sync wave edges, the error on any mapped time is bounded by [1s * rate_error/rate]. For example, if the nominal probe sample rate is 30kHz and the error in that value is 3Hz, then the error in the mapped time would be 0.1ms. Rate error arises when we do not know the actual clock rate. The two largest sources of error are (1) bad/unknown calibration (the largest difference from 30kHz we've seen post calibration is 1Hz), and (2) temperature variation, which we measure to be very small near room temperature: < 0.01Hz/5C. So mapping errors after application of TPrime are typically smaller than 0.1ms. Briefly, the sync-related roles of various components are the following, listed in the order you would organize your workflow: SpikeGLX : Calibrate sample rates Recalibrate rates from run Generate and record runtime sync wave CatGT : Extract tables of sync wave edges Extract tables of non-neural event times your_favorite_spike_sorter : Extract tables of spike times TPrime : Remap all tables of times to reference stream coordinates The remaining sections cover some how-to tips. SpikeGLX: Clock calibration Do I need it? Calibrating your clocks is useful for these reasons: It's a test of headstage health. The measured rate shouldn't be more than 1Hz different than 30kHz, and if you repeat the measurement, it should remain stable to < 0.1Hz. TPrime should also be used if you plan to publish claims about timing. But if you are just browsing in the FileViewer or eyeballing PSTH plots to roughly see how things line up without the bother of running TPrime, that will work better if all clocks are at least calibrated. TPrime needs to be able to identify pairs of matching edges. If the recorded times of edges in the sync wave are a second or more off, the adjustment may suffer phase error. This could be a problem in a long run where error is cumulative. To estimate the duration, consider that an uncalibrated clock could run as much as 1Hz differently than 30kHz. Then a problem will occur at time T, where 1Hz * T = 30000 or T = 8.3 hours. How to Using the Sync tab in the Configuration dialog, you: select a sync wave source specify for each stream which channels are getting sync wave input check Use next run for calibration (and select a run-length) This configures a special purpose run and does a post-run analysis to count how many samples are actually occurring between edges of the sync wave, and thereby deduces the true sample rate. It reports its results in a dialog for you to accept or reject. If accepted these become saved in a database and are used for subsequent runs of those hardware devices until you decide to do another calibration. Tips You probably don't need to calibrate a given device more than once, but you might as well get a good measurement for that one time. We recommend setting the calibration data collection time to 40 min . SpikeGLX: Recalibration Conditions Even if you never calibrated your sample clocks before, you can still calibrate them after the fact from existing run data if: You were recording the sync wave in each stream you want to calibrate. The run is long enough to get a reasonable estimate, at least 20 min. How to To do this, choose item Sample Rates From Run from the Tools menu and follow the instructions in the dialog. As with a first-time calibration it will show you results that you can accept or not. If you accept you can further choose whether to edit this run's metadata, and whether to update the database and use the new rates going forward. The dialog won't let you select imec LF-band files because their time resolution is too low. Rather, select the partner AP-band file. Both AP and LF metadata will be updated together. Note that the LF rate is exactly 1/12 the AP rate. SpikeGLX: Run with sync How to It's easy to do a run that records the sync waveform. Specify a source/generator of the common sync waveform. You have several options: Select any one of the imec slots. Select your NI multifunction I/O device (SpikeGLX programs its output). Use your own signal generator. Set it for 1 Hz and 50% duty cycle. Feed wires from the source to one channel in each stream. For the PXI based versions, all of the imec modules share the sync signal using the chassis backplane, so only one slot (module) needs a wire connected to its SMA connector, whether it is specified as input or output (source). So you connect a wire to just one (active) module, and all imec probes will automatically record the sync wave. If NI is the source, the Notes field indicates which output terminal to connect. Tell the Sync tab which channels you wired so SpikeGLX can locate the waveform in each stream. For NP 1.0 and later, this signal is hard wired to appear on bit #6 of the last 16-bit word in the stream, the SY channel. File T-zero and length When you are running with sync enabled on the Sync tab, whenever a file-writing trigger event occurs and a new set of files is started, SpikeGLX internally uses the edges to make sure that the files all start at a common wall time. Each file's metadata records the sample index number of the first sample in that file: firstSample . These samples are aligned to each other. Said another way, the files share a common T0. While long files are being written, their alignment may slowly degrade because they are running and recording according to their own clock rates. If the clocks have been calibrated this drift will be a bit smaller, but nothing happens during writing to \"reset\" the alignment. Doing that would entail interpolating or resampling of data, which we do not do. (Note that TPrime corrects times by referencing times to sync edges no matter how long the file is. It's effectively like getting periodic resets throughout the run.) The writing phase for a given set of files (given g, t index) ends when a stop event occurs. Perhaps a writing timer elapses, or a TTL trigger gets a stop signal, or you click the Disable or Stop button. Any such event stops all the streams and closes the files, but the \"right-hand-side\" or \"trailing edges\" of the files are not guaranteed to be perfectly aligned. The files are often quite close to being the same length (metadata item fileTimeSecs ), but this is not controlled. CatGT: Event extraction CatGT can perform several post-processing jobs, singly or in combination: Concatenate a t-series of separate trial files (whence the name). Apply bandpass and CAR filters to neural channels. Edit out saturation artifacts. Extract tables of sync waveform edge times to drive TPrime. Extract tables of any other TTL event times to be aligned with spikes. The extraction features are discussed here. General The extraction functions scan non-neural auxiliary channels and report positive going pulse 'events' that meet simple identifying criteria. For each qualifying event, it is the rising threshold crossing (rising edge) that is reported. The reports (in seconds) are in a text file named for the extractor. These event files can be used as input to TPrime. There are three extractor types (shown with their parameters): -SY=probe,word,bit,millisec -XD=word,bit,millisec -XA=word,thresh(v),min(V),millisec There is a lot of overlap in how they work. For any of them you need to specify: Which binary stream disk file to scan. The zero-based word (and bit) to scan in the file timepoints. The duration of the pulse (how long it remains high). Which stream -SY exclusively searches the digital SY word of imec streams. The first parameter is the zero-based probe index. The -XD and -XA options scan only NI streams. There is only one NI stream in any run. Which channel We remind you of some key binary file format ideas to help you specify the correct zero-based {word, bit} of the on-disk saved channel you want to scan: The channel data are 16-bit fields (words). Analog channels are 16-bit signed integers. Digital data (1=high, 0=low) only need 1 bit per signal line, so we group digital signals (up to 16 at a time) into 16-bit unsigned integer words. Starting with imec phase 3B2 (PXI) the 16 external TTL inputs available in the SY word were removed. Instead, the SY word only records a single TTL input: the sync waveform; it's on bit #6. The remaining bits are system status and error flags. It is expected you will record all non-neural signals with NI or other devices and use the sync waveform to align with those data. The ordering of channel types is covered in the SpikeGLX user manual. Basically: Imec AP files: AP-band analogs, then SY digital word. Imec LF files: LF-band analogs, then SY digital word. NI files (standard): XA analogs, then XD digital words. NI files (Whisper): MN analogs, then MA analogs. The counts of channels of each type depends on your selective channel saving strings on the Save tab of SpikeGLX run Configuration dialog. Note that it doesn't matter what the channel names/indices were when acquired. Rather, you need to give the index of the desired channel in the saved file. For example, suppose your selective saving string for an NP 1.0 probe (2) is: '23, 27, 111, 768'. Original channel (23) is file word 0. Original channel (27) is file word 1... If you want to scan bit 6 of the SY word for this probe you would write: > CatGT ... -ap -prb=2 -SY=2,3,6,500 Pulse duration Each extractor type has a parameter to specify the duration of the pulse event in milliseconds. Some remarks: The duration value is applied with +/- 20% tolerance. You can encode multiple signals on one digital line if their durations are discriminable. Your CatGT command line can include several extractors that scan the same word (and bit) but with different duration. If you are pretty sure of the expected duration of your signal, say 500 ms for the high-phase of sync waveforms, then you should specify that non-zero value to guard against false positive edges. On the other hand... If you don't know the duration of the pulses or it is variable, then you can set the duration to zero. CatGT will report all rising edges in that channel regardless of duration. This is more flexible but less robust. -XA parameters The -XA option has a few differences: There's no bit index. You need to specify a threshold voltage that discriminates low from high. Generally you want the threshold pretty low to capture/report when the pulse first began. However, not everything you might want to record has a square shape. If you set the minimum voltage parameter to be > threshold, then qualification requires the amplitude to cross threshold, and, exceed the specified minimum value before it again falls below threshold. If you set the minimum value <= threshold, then no minimum is applied, so it works like a simple square detector. In any case, the reported time is always the initial threshold crossing. Output file naming Extractors name their output files by appending parameters to the stream name. Examples: run_g0_tcat.imec0.SY_word_bit_millisec.txt run_g0_tcat.nidq.XD_word_bit_millisec.txt run_g0_tcat.nidq.XA_word_millisec.txt TPrime: Remapping General After recording, spike sorting, TTL extraction...Now you need to convert all these times from the native timelines of the data streams in which they were measured to a common reference timeline. That's the only way you can compare them! That's what TPrime does. TPrime uses three types of files: tostream : The reference stream we will map to. It is defined by a file of sync wave edges as extracted by CatGT. There is only one of these. fromstream : A native stream we will map from. There can be several of these. A fromstream is identified by a file of sync wave edges extracted by CatGT, and, an arbitrary positive integer that is a shorthand for that stream, just so you don't have to type the edge-file-path over and over. events file : These are times you want to convert. Typically you will have a different file for every event class, such as all the spikes from probe zero, or all the nose_poke times from the NI stream. On the command line for each such file you will specify the stream index for the matching fromstream, an input file of native times, a new file path for the output times. Events files Key specs for events files: Input and output file type can be .txt or .npy (Kilosort). You can mix types: txt in, npy out, etc. Times are seconds, they are not sample numbers . Times are relative to the start of the file. Times are in ascending order. Worked example Outline Here we'll show actual command lines for CatGT and TPrime. We'll use a very simple contrived experiment for concreteness. Two probes {0,1}. Two non-neural NI signals {go_cue, nose_poke}. SpikeGLX settings Just settings relevant to the tool command lines... NI Setup tab: Primary device :: XA box: 0 ; go_cue as analog just to demonstrate Primary device :: XD box: 2,3 ; 2=nose_poke, 3=sync Common analog :: AI range : -5, 5 Sync tab: Square wave source :: Imec slot 3 Inputs :: Nidq : Digital bit, 3 Triggers tab Trigger mode : Immediate start ; single file record, on button press Save tab: Channels to save :: IM (probe 0): 0-49,200-249,768 ; 2 blocks of 50 channels + SY Channels to save :: IM (probe 1): all Channels to save :: NI : all Run naming :: Data directory :: D:/Data Run naming :: Run name : demo Run naming :: Folder per probe : checked SpikeGLX output D:/data/ ; data folder demo/ ; run folder demo_g0_imec0/ ; probe folder demo_g0_t0.imec0.ap.bin demo_g0_t0.imec0.ap.meta demo_g0_t0.imec0.lf.bin demo_g0_t0.imec0.lf.meta demo_g0_imec1/ ; probe folder demo_g0_t0.imec1.ap.bin demo_g0_t0.imec1.ap.meta demo_g0_t0.imec1.lf.bin demo_g0_t0.imec1.lf.meta demo_g0_t0.nidq.bin ; ni at top of run folder demo_g0_t0.nidq.meta CatGT command line I broke the line into several groups using continuation characters (^) but doing so is aesthetic only. The comments (;) must not appear in real commands. IMPORTANT : In real command lines there should be NO extra spaces inserted into the text of options, NOR following a caret (^) character. > CatGT ^ -dir=D:/data -run=demo -prb_fld ^ ; run naming -g=0 -t=0,0 ^ ; g and t range -ap -prb=0,1 -ni ^ ; which streams -aphipass=300 -aplopass=9000 -gbldmx ^ ; filters -SY=0,100,6,500 -SY=1,384,6,500 ^ ; sync, note channel counts -XA=0,1.1,0,25 ^ ; go_cue = 25 ms square pulse -XD=1,2,0 ^ ; nose_poke duration unknown -XD=1,3,500 ^ ; sync -dest=D:/CGT_OUT ^ ; let's put output in new place -out_prb_fld ; and use an output folder per probe CatGT output D:/CGT_OUT/ ; master output folder catgt_demo_g0/ ; run output folder demo_g0_imec0/ ; probe folder demo_g0_tcat.imec0.ap.bin ; filtered data for KS2 demo_g0_tcat.imec0.ap.meta demo_g0_tcat.imec0.SY_100_6_500.txt ; sync edges demo_g0_imec1/ ; probe folder demo_g0_tcat.imec1.ap.bin ; filtered data for KS2 demo_g0_tcat.imec1.ap.meta demo_g0_tcat.imec1.SY_384_6_500.txt ; sync edges demo_g0_tcat.nidq.XA_0_25.txt ; go_cue demo_g0_tcat.nidq.XD_1_2_0.txt ; nose_poke demo_g0_tcat.nidq.XD_1_3_500.txt ; sync edges Kilosort 2 output Suppose we tell KS2 to put its output into the same folders as the CatGT output. Of course we run KS2 once for each probe. The output from KS2 is then: D:/CGT_OUT/ ; master output folder catgt_demo_g0/ ; run output folder demo_g0_imec0/ ; probe folder amplitudes.npy channel_map.npy ... spike_times.npy ; this is in samples ... whitening_mat_inv.npy demo_g0_imec1/ ; probe folder amplitudes.npy channel_map.npy ... spike_times.npy ; this is in samples ... whitening_mat_inv.npy Samples to times Most spike sorters report spike times as sample indices so we'll need our own mini program to convert those to times in seconds. The program: Loads array spike_times.npy . Parses value imSampRate from the metadata file. Divides the rate into each array element. Writes the times out in same folder as spike_seconds.npy . Metadata parsers are available here . IMPORTANT: npy files usually store the values as doubles which preserves full numeric precision. Whenever you are saving clock rates or event times as text, be sure to write the values to microsecond-level precision. Keep six digits in the fractional part. TPrime command line Let's map all times to probe-0: > TPrime -syncperiod=1.0 ^ -tostream=D:/CGT_OUT/catgt_demo_g0/demo_g0_imec0/demo_g0_tcat.imec0.SY_100_6_500.txt ^ -fromstream=1,D:/CGT_OUT/catgt_demo_g0/demo_g0_imec1/demo_g0_tcat.imec1.SY_384_6_500.txt ^ -fromstream=2,D:/CGT_OUT/catgt_demo_g0/demo_g0_tcat.nidq.XD_1_3_500.txt ^ -events=1,D:/CGT_OUT/catgt_demo_g0/demo_g0_imec1/spike_seconds.npy,D:/CGT_OUT/catgt_demo_g0/demo_g0_imec1/spike_seconds_adj.npy ^ -events=2,D:/CGT_OUT/catgt_demo_g0/demo_g0_tcat.nidq.XA_0_25.txt,D:/CGT_OUT/catgt_demo_g0/go_cue.txt ^ -events=2,D:/CGT_OUT/catgt_demo_g0/demo_g0_tcat.nidq.XD_1_2_0.txt,D:/CGT_OUT/catgt_demo_g0/nose_poke.txt Scripted pipeline It can be daunting to get all these command lines correct. You might want to check out Jennifer Colonell's version of the Allen Institute ecephys_spike_sorting pipeline. This Python script-driven pipeline chains together: CatGT, KS2, Noise Cluster Tagging, C_Waves, QC metrics, TPrime. It's been tested a lot here at Janelia. fin","title":"Sync: Aligning with Edges"},{"location":"Help/SyncEdges/Sync_edges/#sync-aligning-with-edges","text":"Document organization: General principles Needed components and their use Worked example showing command line parameters Plug for scripted pipeline","title":"Sync: Aligning with Edges"},{"location":"Help/SyncEdges/Sync_edges/#overview","text":"Definition : SpikeGLX Data Stream = Set of channels sampled according to a given sample clock. Examples of streams: Neuropixels probe . The sample clock lives in the headstage . The AP-band data are acquired at nominally 30kHz but actual rates may differ by as much as one Hz. If that probe acquires a separate LF-band, the same clock is used and the LF-band sample rate is exactly 1/12 that of the AP-band. In short each probe, really each headstage, is a separate stream. NI device : Generally you will record all of your non-neural analog and digital (TTL) channels with a single multifunction/multichannel device running at a sample rate that you select. This is one stream. Actually SpikeGLX lets you run two NI devices of the same model together, one master and one slave, so that they share a common clock, and are thus recorded and treated as a single stream with double the channel capacity. Problem : Generally, data streams each have their own clock, hence, their own nominal sample rate, and run asynchronously. Moreover, sample clock rates will vary with temperature. This makes it necessary and challenging to synchronize (align) events acquired in different streams. Solution : SpikeGLX (plus companion tools CatGT and TPrime ) provide a reliable means of aligning data to sub-millisecond accuracy. Note that the SpikeGLX \"alignment\" process does not entail any resampling or editing of the raw acquired data. Rather it is a scheme for mapping post-analysis event times (seconds, not samples) from one coordinate system to another. This mapping scheme is implemented as follows. A common 1 Hz square wave is recorded in one channel of each data stream throughout the experiment. In offline processing, the rising edges in this \" sync wave \" are paired across streams A & B. Any event (T) occurring in B is no more than one second away from a nearest (preceding) sync wave edge (Eb) in stream B. That edge has a simultaneously occurring matching edge (Ea) in stream A. To map T in stream B to T' in stream A, we simply calculate: T' = T - Eb + Ea. Assuming we can correctly pair sync wave edges, the error on any mapped time is bounded by [1s * rate_error/rate]. For example, if the nominal probe sample rate is 30kHz and the error in that value is 3Hz, then the error in the mapped time would be 0.1ms. Rate error arises when we do not know the actual clock rate. The two largest sources of error are (1) bad/unknown calibration (the largest difference from 30kHz we've seen post calibration is 1Hz), and (2) temperature variation, which we measure to be very small near room temperature: < 0.01Hz/5C. So mapping errors after application of TPrime are typically smaller than 0.1ms. Briefly, the sync-related roles of various components are the following, listed in the order you would organize your workflow: SpikeGLX : Calibrate sample rates Recalibrate rates from run Generate and record runtime sync wave CatGT : Extract tables of sync wave edges Extract tables of non-neural event times your_favorite_spike_sorter : Extract tables of spike times TPrime : Remap all tables of times to reference stream coordinates The remaining sections cover some how-to tips.","title":"Overview"},{"location":"Help/SyncEdges/Sync_edges/#spikeglx-clock-calibration","text":"","title":"SpikeGLX: Clock calibration"},{"location":"Help/SyncEdges/Sync_edges/#do-i-need-it","text":"Calibrating your clocks is useful for these reasons: It's a test of headstage health. The measured rate shouldn't be more than 1Hz different than 30kHz, and if you repeat the measurement, it should remain stable to < 0.1Hz. TPrime should also be used if you plan to publish claims about timing. But if you are just browsing in the FileViewer or eyeballing PSTH plots to roughly see how things line up without the bother of running TPrime, that will work better if all clocks are at least calibrated. TPrime needs to be able to identify pairs of matching edges. If the recorded times of edges in the sync wave are a second or more off, the adjustment may suffer phase error. This could be a problem in a long run where error is cumulative. To estimate the duration, consider that an uncalibrated clock could run as much as 1Hz differently than 30kHz. Then a problem will occur at time T, where 1Hz * T = 30000 or T = 8.3 hours.","title":"Do I need it?"},{"location":"Help/SyncEdges/Sync_edges/#how-to","text":"Using the Sync tab in the Configuration dialog, you: select a sync wave source specify for each stream which channels are getting sync wave input check Use next run for calibration (and select a run-length) This configures a special purpose run and does a post-run analysis to count how many samples are actually occurring between edges of the sync wave, and thereby deduces the true sample rate. It reports its results in a dialog for you to accept or reject. If accepted these become saved in a database and are used for subsequent runs of those hardware devices until you decide to do another calibration.","title":"How to"},{"location":"Help/SyncEdges/Sync_edges/#tips","text":"You probably don't need to calibrate a given device more than once, but you might as well get a good measurement for that one time. We recommend setting the calibration data collection time to 40 min .","title":"Tips"},{"location":"Help/SyncEdges/Sync_edges/#spikeglx-recalibration","text":"","title":"SpikeGLX: Recalibration"},{"location":"Help/SyncEdges/Sync_edges/#conditions","text":"Even if you never calibrated your sample clocks before, you can still calibrate them after the fact from existing run data if: You were recording the sync wave in each stream you want to calibrate. The run is long enough to get a reasonable estimate, at least 20 min.","title":"Conditions"},{"location":"Help/SyncEdges/Sync_edges/#how-to_1","text":"To do this, choose item Sample Rates From Run from the Tools menu and follow the instructions in the dialog. As with a first-time calibration it will show you results that you can accept or not. If you accept you can further choose whether to edit this run's metadata, and whether to update the database and use the new rates going forward. The dialog won't let you select imec LF-band files because their time resolution is too low. Rather, select the partner AP-band file. Both AP and LF metadata will be updated together. Note that the LF rate is exactly 1/12 the AP rate.","title":"How to"},{"location":"Help/SyncEdges/Sync_edges/#spikeglx-run-with-sync","text":"","title":"SpikeGLX: Run with sync"},{"location":"Help/SyncEdges/Sync_edges/#how-to_2","text":"It's easy to do a run that records the sync waveform. Specify a source/generator of the common sync waveform. You have several options: Select any one of the imec slots. Select your NI multifunction I/O device (SpikeGLX programs its output). Use your own signal generator. Set it for 1 Hz and 50% duty cycle. Feed wires from the source to one channel in each stream. For the PXI based versions, all of the imec modules share the sync signal using the chassis backplane, so only one slot (module) needs a wire connected to its SMA connector, whether it is specified as input or output (source). So you connect a wire to just one (active) module, and all imec probes will automatically record the sync wave. If NI is the source, the Notes field indicates which output terminal to connect. Tell the Sync tab which channels you wired so SpikeGLX can locate the waveform in each stream. For NP 1.0 and later, this signal is hard wired to appear on bit #6 of the last 16-bit word in the stream, the SY channel.","title":"How to"},{"location":"Help/SyncEdges/Sync_edges/#file-t-zero-and-length","text":"When you are running with sync enabled on the Sync tab, whenever a file-writing trigger event occurs and a new set of files is started, SpikeGLX internally uses the edges to make sure that the files all start at a common wall time. Each file's metadata records the sample index number of the first sample in that file: firstSample . These samples are aligned to each other. Said another way, the files share a common T0. While long files are being written, their alignment may slowly degrade because they are running and recording according to their own clock rates. If the clocks have been calibrated this drift will be a bit smaller, but nothing happens during writing to \"reset\" the alignment. Doing that would entail interpolating or resampling of data, which we do not do. (Note that TPrime corrects times by referencing times to sync edges no matter how long the file is. It's effectively like getting periodic resets throughout the run.) The writing phase for a given set of files (given g, t index) ends when a stop event occurs. Perhaps a writing timer elapses, or a TTL trigger gets a stop signal, or you click the Disable or Stop button. Any such event stops all the streams and closes the files, but the \"right-hand-side\" or \"trailing edges\" of the files are not guaranteed to be perfectly aligned. The files are often quite close to being the same length (metadata item fileTimeSecs ), but this is not controlled.","title":"File T-zero and length"},{"location":"Help/SyncEdges/Sync_edges/#catgt-event-extraction","text":"CatGT can perform several post-processing jobs, singly or in combination: Concatenate a t-series of separate trial files (whence the name). Apply bandpass and CAR filters to neural channels. Edit out saturation artifacts. Extract tables of sync waveform edge times to drive TPrime. Extract tables of any other TTL event times to be aligned with spikes. The extraction features are discussed here.","title":"CatGT: Event extraction"},{"location":"Help/SyncEdges/Sync_edges/#general","text":"The extraction functions scan non-neural auxiliary channels and report positive going pulse 'events' that meet simple identifying criteria. For each qualifying event, it is the rising threshold crossing (rising edge) that is reported. The reports (in seconds) are in a text file named for the extractor. These event files can be used as input to TPrime. There are three extractor types (shown with their parameters): -SY=probe,word,bit,millisec -XD=word,bit,millisec -XA=word,thresh(v),min(V),millisec There is a lot of overlap in how they work. For any of them you need to specify: Which binary stream disk file to scan. The zero-based word (and bit) to scan in the file timepoints. The duration of the pulse (how long it remains high).","title":"General"},{"location":"Help/SyncEdges/Sync_edges/#which-stream","text":"-SY exclusively searches the digital SY word of imec streams. The first parameter is the zero-based probe index. The -XD and -XA options scan only NI streams. There is only one NI stream in any run.","title":"Which stream"},{"location":"Help/SyncEdges/Sync_edges/#which-channel","text":"We remind you of some key binary file format ideas to help you specify the correct zero-based {word, bit} of the on-disk saved channel you want to scan: The channel data are 16-bit fields (words). Analog channels are 16-bit signed integers. Digital data (1=high, 0=low) only need 1 bit per signal line, so we group digital signals (up to 16 at a time) into 16-bit unsigned integer words. Starting with imec phase 3B2 (PXI) the 16 external TTL inputs available in the SY word were removed. Instead, the SY word only records a single TTL input: the sync waveform; it's on bit #6. The remaining bits are system status and error flags. It is expected you will record all non-neural signals with NI or other devices and use the sync waveform to align with those data. The ordering of channel types is covered in the SpikeGLX user manual. Basically: Imec AP files: AP-band analogs, then SY digital word. Imec LF files: LF-band analogs, then SY digital word. NI files (standard): XA analogs, then XD digital words. NI files (Whisper): MN analogs, then MA analogs. The counts of channels of each type depends on your selective channel saving strings on the Save tab of SpikeGLX run Configuration dialog. Note that it doesn't matter what the channel names/indices were when acquired. Rather, you need to give the index of the desired channel in the saved file. For example, suppose your selective saving string for an NP 1.0 probe (2) is: '23, 27, 111, 768'. Original channel (23) is file word 0. Original channel (27) is file word 1... If you want to scan bit 6 of the SY word for this probe you would write: > CatGT ... -ap -prb=2 -SY=2,3,6,500","title":"Which channel"},{"location":"Help/SyncEdges/Sync_edges/#pulse-duration","text":"Each extractor type has a parameter to specify the duration of the pulse event in milliseconds. Some remarks: The duration value is applied with +/- 20% tolerance. You can encode multiple signals on one digital line if their durations are discriminable. Your CatGT command line can include several extractors that scan the same word (and bit) but with different duration. If you are pretty sure of the expected duration of your signal, say 500 ms for the high-phase of sync waveforms, then you should specify that non-zero value to guard against false positive edges. On the other hand... If you don't know the duration of the pulses or it is variable, then you can set the duration to zero. CatGT will report all rising edges in that channel regardless of duration. This is more flexible but less robust.","title":"Pulse duration"},{"location":"Help/SyncEdges/Sync_edges/#-xa-parameters","text":"The -XA option has a few differences: There's no bit index. You need to specify a threshold voltage that discriminates low from high. Generally you want the threshold pretty low to capture/report when the pulse first began. However, not everything you might want to record has a square shape. If you set the minimum voltage parameter to be > threshold, then qualification requires the amplitude to cross threshold, and, exceed the specified minimum value before it again falls below threshold. If you set the minimum value <= threshold, then no minimum is applied, so it works like a simple square detector. In any case, the reported time is always the initial threshold crossing.","title":"-XA parameters"},{"location":"Help/SyncEdges/Sync_edges/#output-file-naming","text":"Extractors name their output files by appending parameters to the stream name. Examples: run_g0_tcat.imec0.SY_word_bit_millisec.txt run_g0_tcat.nidq.XD_word_bit_millisec.txt run_g0_tcat.nidq.XA_word_millisec.txt","title":"Output file naming"},{"location":"Help/SyncEdges/Sync_edges/#tprime-remapping","text":"","title":"TPrime: Remapping"},{"location":"Help/SyncEdges/Sync_edges/#general_1","text":"After recording, spike sorting, TTL extraction...Now you need to convert all these times from the native timelines of the data streams in which they were measured to a common reference timeline. That's the only way you can compare them! That's what TPrime does. TPrime uses three types of files: tostream : The reference stream we will map to. It is defined by a file of sync wave edges as extracted by CatGT. There is only one of these. fromstream : A native stream we will map from. There can be several of these. A fromstream is identified by a file of sync wave edges extracted by CatGT, and, an arbitrary positive integer that is a shorthand for that stream, just so you don't have to type the edge-file-path over and over. events file : These are times you want to convert. Typically you will have a different file for every event class, such as all the spikes from probe zero, or all the nose_poke times from the NI stream. On the command line for each such file you will specify the stream index for the matching fromstream, an input file of native times, a new file path for the output times.","title":"General"},{"location":"Help/SyncEdges/Sync_edges/#events-files","text":"Key specs for events files: Input and output file type can be .txt or .npy (Kilosort). You can mix types: txt in, npy out, etc. Times are seconds, they are not sample numbers . Times are relative to the start of the file. Times are in ascending order.","title":"Events files"},{"location":"Help/SyncEdges/Sync_edges/#worked-example","text":"","title":"Worked example"},{"location":"Help/SyncEdges/Sync_edges/#outline","text":"Here we'll show actual command lines for CatGT and TPrime. We'll use a very simple contrived experiment for concreteness. Two probes {0,1}. Two non-neural NI signals {go_cue, nose_poke}.","title":"Outline"},{"location":"Help/SyncEdges/Sync_edges/#spikeglx-settings","text":"Just settings relevant to the tool command lines... NI Setup tab: Primary device :: XA box: 0 ; go_cue as analog just to demonstrate Primary device :: XD box: 2,3 ; 2=nose_poke, 3=sync Common analog :: AI range : -5, 5 Sync tab: Square wave source :: Imec slot 3 Inputs :: Nidq : Digital bit, 3 Triggers tab Trigger mode : Immediate start ; single file record, on button press Save tab: Channels to save :: IM (probe 0): 0-49,200-249,768 ; 2 blocks of 50 channels + SY Channels to save :: IM (probe 1): all Channels to save :: NI : all Run naming :: Data directory :: D:/Data Run naming :: Run name : demo Run naming :: Folder per probe : checked","title":"SpikeGLX settings"},{"location":"Help/SyncEdges/Sync_edges/#spikeglx-output","text":"D:/data/ ; data folder demo/ ; run folder demo_g0_imec0/ ; probe folder demo_g0_t0.imec0.ap.bin demo_g0_t0.imec0.ap.meta demo_g0_t0.imec0.lf.bin demo_g0_t0.imec0.lf.meta demo_g0_imec1/ ; probe folder demo_g0_t0.imec1.ap.bin demo_g0_t0.imec1.ap.meta demo_g0_t0.imec1.lf.bin demo_g0_t0.imec1.lf.meta demo_g0_t0.nidq.bin ; ni at top of run folder demo_g0_t0.nidq.meta","title":"SpikeGLX output"},{"location":"Help/SyncEdges/Sync_edges/#catgt-command-line","text":"I broke the line into several groups using continuation characters (^) but doing so is aesthetic only. The comments (;) must not appear in real commands. IMPORTANT : In real command lines there should be NO extra spaces inserted into the text of options, NOR following a caret (^) character. > CatGT ^ -dir=D:/data -run=demo -prb_fld ^ ; run naming -g=0 -t=0,0 ^ ; g and t range -ap -prb=0,1 -ni ^ ; which streams -aphipass=300 -aplopass=9000 -gbldmx ^ ; filters -SY=0,100,6,500 -SY=1,384,6,500 ^ ; sync, note channel counts -XA=0,1.1,0,25 ^ ; go_cue = 25 ms square pulse -XD=1,2,0 ^ ; nose_poke duration unknown -XD=1,3,500 ^ ; sync -dest=D:/CGT_OUT ^ ; let's put output in new place -out_prb_fld ; and use an output folder per probe","title":"CatGT command line"},{"location":"Help/SyncEdges/Sync_edges/#catgt-output","text":"D:/CGT_OUT/ ; master output folder catgt_demo_g0/ ; run output folder demo_g0_imec0/ ; probe folder demo_g0_tcat.imec0.ap.bin ; filtered data for KS2 demo_g0_tcat.imec0.ap.meta demo_g0_tcat.imec0.SY_100_6_500.txt ; sync edges demo_g0_imec1/ ; probe folder demo_g0_tcat.imec1.ap.bin ; filtered data for KS2 demo_g0_tcat.imec1.ap.meta demo_g0_tcat.imec1.SY_384_6_500.txt ; sync edges demo_g0_tcat.nidq.XA_0_25.txt ; go_cue demo_g0_tcat.nidq.XD_1_2_0.txt ; nose_poke demo_g0_tcat.nidq.XD_1_3_500.txt ; sync edges","title":"CatGT output"},{"location":"Help/SyncEdges/Sync_edges/#kilosort-2-output","text":"Suppose we tell KS2 to put its output into the same folders as the CatGT output. Of course we run KS2 once for each probe. The output from KS2 is then: D:/CGT_OUT/ ; master output folder catgt_demo_g0/ ; run output folder demo_g0_imec0/ ; probe folder amplitudes.npy channel_map.npy ... spike_times.npy ; this is in samples ... whitening_mat_inv.npy demo_g0_imec1/ ; probe folder amplitudes.npy channel_map.npy ... spike_times.npy ; this is in samples ... whitening_mat_inv.npy","title":"Kilosort 2 output"},{"location":"Help/SyncEdges/Sync_edges/#samples-to-times","text":"Most spike sorters report spike times as sample indices so we'll need our own mini program to convert those to times in seconds. The program: Loads array spike_times.npy . Parses value imSampRate from the metadata file. Divides the rate into each array element. Writes the times out in same folder as spike_seconds.npy . Metadata parsers are available here . IMPORTANT: npy files usually store the values as doubles which preserves full numeric precision. Whenever you are saving clock rates or event times as text, be sure to write the values to microsecond-level precision. Keep six digits in the fractional part.","title":"Samples to times"},{"location":"Help/SyncEdges/Sync_edges/#tprime-command-line","text":"Let's map all times to probe-0: > TPrime -syncperiod=1.0 ^ -tostream=D:/CGT_OUT/catgt_demo_g0/demo_g0_imec0/demo_g0_tcat.imec0.SY_100_6_500.txt ^ -fromstream=1,D:/CGT_OUT/catgt_demo_g0/demo_g0_imec1/demo_g0_tcat.imec1.SY_384_6_500.txt ^ -fromstream=2,D:/CGT_OUT/catgt_demo_g0/demo_g0_tcat.nidq.XD_1_3_500.txt ^ -events=1,D:/CGT_OUT/catgt_demo_g0/demo_g0_imec1/spike_seconds.npy,D:/CGT_OUT/catgt_demo_g0/demo_g0_imec1/spike_seconds_adj.npy ^ -events=2,D:/CGT_OUT/catgt_demo_g0/demo_g0_tcat.nidq.XA_0_25.txt,D:/CGT_OUT/catgt_demo_g0/go_cue.txt ^ -events=2,D:/CGT_OUT/catgt_demo_g0/demo_g0_tcat.nidq.XD_1_2_0.txt,D:/CGT_OUT/catgt_demo_g0/nose_poke.txt","title":"TPrime command line"},{"location":"Help/SyncEdges/Sync_edges/#scripted-pipeline","text":"It can be daunting to get all these command lines correct. You might want to check out Jennifer Colonell's version of the Allen Institute ecephys_spike_sorting pipeline. This Python script-driven pipeline chains together: CatGT, KS2, Noise Cluster Tagging, C_Waves, QC metrics, TPrime. It's been tested a lot here at Janelia. fin","title":"Scripted pipeline"},{"location":"Help/dmx_vs_gbl/dmx_vs_gbl/","text":"CatGT: Global Demuxed CAR How it works The -gbldmx option in CatGT applies the same global demux filter available in the SpikeGLX user interface. This option performs a modified form of common average referencing, which takes account of the fact that the channels in a Neuropixels probe are not all sampled simultaneously. Rather, the channels are split into multiplexed groups, and one channel from each group is sampled at each tick of the multiplexed data rate. Gbldmx performs CAR on subsets of channels that are sampled concurrently. The variation in sampling time can only be seen in very fast transients, for example licking artifacts: Compare to standard CAR Global average referencing (CAR), which subtracts the average of all channels from each individual channel, does a poor job at correcting these very fast transients because the signal is different for channels sampled at different times. The following figure compares standard and demuxed CAR: RMS noise issues A potential downside of gbldmx vs. standard CAR is that the calculated correction is averaged over fewer channels, and therefore more prone to noise. However, the differences in estimated rms between the two techniques are very small. Below is example data showing estimated rms vs. channel from a Neuropixels 1.0 probe in mouse thalamus. Editing with gfix vs filtering with gbldmx Global averaging with demux is valuable when the data contain artifacts with very fast transients. Such artifacts can also be corrected with CatGT's -gfix option. This cuts fast transients out and replaces them with zeros so the time span of the data is preserved. This option is specified, for example, as follows: -gfix=0.40,0.10,0.02 . This requires that a transient artifact must attain a peak amplitude of at least ||0.40 mV||, must reach its peak as least as rapidly as ||0.1mV/sample-tick||, and the transient is over when the amplitude settles back to ||0.02 mV|| or smaller. These values are easy to read by inspecting examples with the SpikeGLX FileViewer. Furthermore, within each demux group, at least 25% of the channels must show a transient with these characteristics. Such timepoints are flagged. After all other filtering has been applied, the data are edited to replace the artifact span with zeros in all channels. It does make sense to use -gfix and -gbldmx options together. Editing removes extreme artifacts completely, while demuxed CAR removes common background noise at all timepoints, not just at extrema. Case for CAR? In data that do not contain such artifacts, a user may wish to simply apply the CAR filter implemented in spike sorting programs. This might be a simpler workflow if CatGT isn't playing any other role, such as trial concatenation or event extraction. What about LFP? Neither CAR nor demuxed CAR are recommended when analyzing low freqencies. The LFP varies slowly over the whole shank, making distant channels a bad reference for correcting noise. fin","title":"CatGT: Global Demuxed CAR"},{"location":"Help/dmx_vs_gbl/dmx_vs_gbl/#catgt-global-demuxed-car","text":"","title":"CatGT: Global Demuxed CAR"},{"location":"Help/dmx_vs_gbl/dmx_vs_gbl/#how-it-works","text":"The -gbldmx option in CatGT applies the same global demux filter available in the SpikeGLX user interface. This option performs a modified form of common average referencing, which takes account of the fact that the channels in a Neuropixels probe are not all sampled simultaneously. Rather, the channels are split into multiplexed groups, and one channel from each group is sampled at each tick of the multiplexed data rate. Gbldmx performs CAR on subsets of channels that are sampled concurrently. The variation in sampling time can only be seen in very fast transients, for example licking artifacts:","title":"How it works"},{"location":"Help/dmx_vs_gbl/dmx_vs_gbl/#compare-to-standard-car","text":"Global average referencing (CAR), which subtracts the average of all channels from each individual channel, does a poor job at correcting these very fast transients because the signal is different for channels sampled at different times. The following figure compares standard and demuxed CAR:","title":"Compare to standard CAR"},{"location":"Help/dmx_vs_gbl/dmx_vs_gbl/#rms-noise-issues","text":"A potential downside of gbldmx vs. standard CAR is that the calculated correction is averaged over fewer channels, and therefore more prone to noise. However, the differences in estimated rms between the two techniques are very small. Below is example data showing estimated rms vs. channel from a Neuropixels 1.0 probe in mouse thalamus.","title":"RMS noise issues"},{"location":"Help/dmx_vs_gbl/dmx_vs_gbl/#editing-with-gfix-vs-filtering-with-gbldmx","text":"Global averaging with demux is valuable when the data contain artifacts with very fast transients. Such artifacts can also be corrected with CatGT's -gfix option. This cuts fast transients out and replaces them with zeros so the time span of the data is preserved. This option is specified, for example, as follows: -gfix=0.40,0.10,0.02 . This requires that a transient artifact must attain a peak amplitude of at least ||0.40 mV||, must reach its peak as least as rapidly as ||0.1mV/sample-tick||, and the transient is over when the amplitude settles back to ||0.02 mV|| or smaller. These values are easy to read by inspecting examples with the SpikeGLX FileViewer. Furthermore, within each demux group, at least 25% of the channels must show a transient with these characteristics. Such timepoints are flagged. After all other filtering has been applied, the data are edited to replace the artifact span with zeros in all channels. It does make sense to use -gfix and -gbldmx options together. Editing removes extreme artifacts completely, while demuxed CAR removes common background noise at all timepoints, not just at extrema.","title":"Editing with gfix vs filtering with gbldmx"},{"location":"Help/dmx_vs_gbl/dmx_vs_gbl/#case-for-car","text":"In data that do not contain such artifacts, a user may wish to simply apply the CAR filter implemented in spike sorting programs. This might be a simpler workflow if CatGT isn't playing any other role, such as trial concatenation or event extraction.","title":"Case for CAR?"},{"location":"Help/dmx_vs_gbl/dmx_vs_gbl/#what-about-lfp","text":"Neither CAR nor demuxed CAR are recommended when analyzing low freqencies. The LFP varies slowly over the whole shank, making distant channels a bad reference for correcting noise. fin","title":"What about LFP?"}]}